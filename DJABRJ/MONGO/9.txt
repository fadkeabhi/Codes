Create collection for Student{roll_no, name, class, dept, aggregate_marks}. Write Map Reduce Functions for 
following requirements. 
1. Finding the total marks of students of “TE” class department-wise. 
2. Finding the highest marks of students of “SE” class department-wise. 
3. Find Average marks of students of “BE” class department-wise. 

##################################################

db.createCollection("Student")

db.Student.insertMany([
  {
    roll_no: "A101",
    name: "Amit Kumar",
    class: "TE",
    dept: "Comp",
    aggregate_marks: 85
  },
  {
    roll_no: "A102",
    name: "Neha Sharma",
    class: "BE",
    dept: "IT",
    aggregate_marks: 92
  },
  {
    roll_no: "A103",
    name: "Rahul Verma",
    class: "SE",
    dept: "ENtc",
    aggregate_marks: 78
  },
  {
    roll_no: "A104",
    name: "Priya Singh",
    class: "TE",
    dept: "Comp",
    aggregate_marks: 88
  },
  {
    roll_no: "A105",
    name: "Rajesh Sharma",
    class: "BE",
    dept: "IT",
    aggregate_marks: 95
  },
  {
    roll_no: "A106",
    name: "Nisha Verma",
    class: "SE",
    dept: "ENtc",
    aggregate_marks: 80
  },
  {
    roll_no: "A107",
    name: "Amit Yadav",
    class: "TE",
    dept: "Comp",
    aggregate_marks: 86
  },
  {
    roll_no: "A108",
    name: "Pooja Mishra",
    class: "BE",
    dept: "IT",
    aggregate_marks: 93
  },
  {
    roll_no: "A109",
    name: "Sachin Tiwari",
    class: "SE",
    dept: "ENtc",
    aggregate_marks: 79
  },
  {
    roll_no: "A110",
    name: "Rahul Kumar",
    class: "TE",
    dept: "Comp",
    aggregate_marks: 87
  }
])
db.Student.insertOne({ "roll_no" : "A111", "name" : "Rahul Kumar 2", "class" : "TE", "dept" : "ENTC", "aggregate_marks" : 87 })


##############################################

1
var mapFunction = function() {
  if (this.class === "TE") {
    emit(this.dept, this.aggregate_marks);
  }
};

var reduceFunction = function(key, values) {
  return Array.sum(values);
};

db.Student.mapReduce(mapFunction, reduceFunction, { out: "TE_TotalMarks" })
db.TE_TotalMarks.find()


2
var m = function(){
if(this.class == "SE"){
emit(this.dept, this.aggregate_marks);
}
}

var r = function(key, values) {
    var max = values[0]; 
    for (var i = 1; i < values.length; i++) {
        if (values[i] > max) {
            max = values[i]; 
        }
    }
    return max; 
}

db.Student.mapReduce(m,r,{out:"a2"})



3
var m = function(){
if(this.class == "BE"){
emit(this.dept, this.aggregate_marks);
}
}

var r = function(key, values) {
    return Array.avg(values); 
}

db.Student.mapReduce(m,r,{out:"a3"})